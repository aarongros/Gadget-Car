//Link to lights video: https://www.youtube.com/watch?v=rwz71eXZiJQ
int leftLights[3] = {3,4,5};
int rightLights[3] = {6,7,8};
int headlights = 9;
int leftInput = 10;
int rightInput = 16;
int hazardsInput = 14;
int brakingInput = 15;
int headlightsInput = 2;
int waitTime = 500;
boolean leftAndBraking = false;
boolean rightAndBraking = false;
boolean brakingOn = false;
boolean headlightsOn = false;
////////////////Setup the headlights, back lights, and all the inputs describing the state of each function
void setup()  {
  for(int i = 0; i < 3; i++)  {
    pinMode(leftLights[i], OUTPUT);
    pinMode(rightLights[i], OUTPUT);
  }
  pinMode(headlights, OUTPUT);
  pinMode(leftInput, INPUT);
  pinMode(rightInput, INPUT);
  pinMode(hazardsInput, INPUT);
  pinMode(brakingInput, INPUT);
  pinMode(headlightsInput, INPUT);
}
////////////////Loops cheching if any on the functions should run
void loop() {
  checkBraking();
  checkTurning();
  checkTurningAndBraking();
  checkHazards();
  checkHeadLights();
}
////////////////Checks if headlights should change state and changes it if necessary
void checkHeadLights()  {
  if(digitalRead(headlightsInput).equals(HIGH) && !headlightsOn)  {
    digitalWrite(headlights,HIGH);
    headlightsOn = !headlightsOn;
  }
  else if(digitalRead(headlightsInput).equals(LOW) && headlightsOn) {
    digitalWrite(headlights,LOW);
    headlightsOn = !headlightsOn;
  }
}
////////////////Checks if the hazards should change state and changes it if necessary
void checkHazards() {
  if(digitalRead(hazardsInput).equals(HIGH)) {
    hazardLights();
  }
}
////////////////Checks if the light signals should change state and changes it if necessary
void checkTurning() {
  if(digitalRead(leftInput).equals(HIGH))  {
      turnLeftBlincker();
      if(brakingOn) {
       leftAndBraking = true;     
      }
  }
  if(digitalRead(rightInput).equals(HIGH))  {
      turnRightBlincker();
      if(brakingOn) {
       rightAndBraking = true;     
      }
  }
}
////////////////Checks if the brake lights should change state and changes it if necessary
void checkBraking() {
  if(digitalRead(brakingInput).equals(HIGH) && !brakingOn)  {
    brakeLights();
    brakingOn = !brakingOn;
  }
  else if(digitalRead(brakingInput).equals(LOW) && brakingOn) {
    allOff();
    brakingOn = !brakingOn;
  }
}
////////////////Makes sure there are no errors when turning and braking
checkTurningAndBraking()  {
  if(digitalRead(leftInput).equals(LOW) && leftAndBraking)  {
    for(int tb = 0; tb < 0; tb++)  {
      digitalWrite(leftLights[tb], HIGH);
      delay(waitTime);
    }
    leftAndBraking = false;     
  } 
  if(digitalRead(rightInput).equals(LOW) && rightAndBraking)  {
    for(int rb = 0; rb < 0; rb++)  {
      digitalWrite(rightLights[rb], HIGH);
      delay(waitTime);
    }
    rightAndBraking = false;
  }
}
////////////////Turns on the left blincker
void turnLeftBlincker()  {
  for(int lt = 0; lt < 3; lt++)  {
    digitalWrite(leftLights[lt], HIGH);
    delay(waitTime);
  }
  leftOff();
  delay(waitTime);
}
////////////////Turns on the right blincker
void turnRightBlincker()  {
  for(int rt = 0; rt < 3; rt++)  {
    digitalWrite(rightLights[rt], HIGH);
    delay(waitTime);
  }
  rightOff();
  delay(waitTime);
}
////////////////Turns on the hazard lights
void hazardLights()  {
  brakeLights();
  allOff();
  delay(waitTime);
}
////////////////Turns on the brake lights
void brakeLights() {
  for(int b = 0; b < 3; b++)  {
    digitalWrite(leftLights[b], HIGH);
    digitalWrite(rightLights[b], HIGH);
    delay(waitTime);
  }
}
////////////////Turns off all the back lights
void allOff()  {
  for(int a = 0; a < 3; a++)  {
    digitalWrite(leftLights[a], LOW);
    digitalWrite(rightLights[a], LOW);
  }
}
////////////////Turns off all the back left lights
void leftOff()  {
  for(int l = 0; l < 3; l++)  {
    digitalWrite(leftLights[l], LOW);
  }
}
////////////////Turns off all the back right lights
void rightOff()  {
  for(int r = 0; r < 3; r++)  {
    digitalWrite(rightLights[r], LOW);
  }
}
